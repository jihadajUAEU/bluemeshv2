services:
  postgres:
    image: postgres:17.0
    container_name: workflow-postgres
    environment:
      POSTGRES_USER: dbuser
      POSTGRES_PASSWORD: dbpassword
      POSTGRES_DB: workflow_automation
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../data-layer/database/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dbuser -d workflow_automation"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4
    container_name: workflow-redis
    command: redis-server --requirepass redispassword
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong:
    image: kong:3.9.0
    container_name: workflow-kong
    environment:
      KONG_DATABASE: 'off'
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
    ports:
      - "9000:8000"
      - "8001:8001"
      - "9443:8443"
      - "8444:8444"
    volumes:
      - ./kong:/usr/local/kong/declarative
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: workflow-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/workflow_automation
      KC_DB_USERNAME: dbuser
      KC_DB_PASSWORD: dbpassword
      KC_HEALTH_ENABLED: "true"
    ports:
      - "8080:8080"
    volumes:
      - ../security/keycloak:/opt/keycloak/data/import
    depends_on:
      postgres:
        condition: service_healthy
    command: 
      - start-dev 
      - --import-realm
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: workflow-zipkin
    ports:
      - "9411:9411"
    healthcheck:
      test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:9411/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  workflow-service:
    build:
      context: ..
      dockerfile: application-services/workflow-service/Dockerfile
    container_name: workflow-service
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3001
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: dbuser
      POSTGRES_PASSWORD: dbpassword
      POSTGRES_DB: workflow_automation
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  workflow-service-dapr:
    image: "daprio/daprd:edge"
    command: [
      "./daprd",
      "--app-id", "workflow-service",
      "--app-port", "3001",
      "--dapr-http-port", "3502",
      "--dapr-grpc-port", "50002",
      "--resources-path", "/dapr/components",
      "--config", "/dapr/config/config.yaml"
    ]
    volumes:
      - "../dapr/components:/dapr/components"
      - "../dapr/config:/dapr/config"
    depends_on:
      - workflow-service
    network_mode: "service:workflow-service"

  crew-service:
    build:
      context: ../ai-services/crew-service
      dockerfile: Dockerfile
    container_name: crew-service
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  crew-service-dapr:
    image: "daprio/daprd:edge"
    command: [
      "./daprd",
      "--app-id", "crew-service",
      "--app-port", "8000",
      "--dapr-http-port", "3503",
      "--dapr-grpc-port", "50003",
      "--resources-path", "/dapr/components",
      "--config", "/dapr/config/config.yaml"
    ]
    volumes:
      - "../dapr/components:/dapr/components"
      - "../dapr/config:/dapr/config"
    depends_on:
      - crew-service
    network_mode: "service:crew-service"

volumes:
  postgres_data:
  redis_data:
